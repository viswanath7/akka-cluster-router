LoadBalancer{
  akka {
    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
    }
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "127.0.0.1"
        port = 0
      }
    }

    cluster {
      seed-nodes = [
        "akka.tcp://ClusterSystem@127.0.0.1:2551",
        "akka.tcp://ClusterSystem@127.0.0.1:2552"]
      auto-down-unreachable-after = 10s
    }
  }

  akka.cluster.min-nr-of-members = 3


  akka.cluster.role {
    frontend.min-nr-of-members = 1
    backend.min-nr-of-members = 2
  }

  akka.actor.deployment {
    /frontend/backendRouter {
      # Router type provided by metrics extension.
      router = adaptive-group
      # Router parameter specific for metrics extension.
      # metrics-selector = heap + load + cpu
      metrics-selector = mix
      #
      nr-of-instances = 100
      routees.paths = ["/user/backend"]
      cluster {
        enabled = on
        use-role = backend
        allow-local-routees = off
      }
    }
  }
}


FrontEnd {
  akka {
    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
    }
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "127.0.0.1"
        port = 2551
      }
    }

    cluster {
      roles = ["frontend"]
      seed-nodes = [
        "akka.tcp://ClusterSystem@127.0.0.1:2551"]

      auto-down-unreachable-after = 10s
    }
  }
}

Backend {
  akka{
    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
    }
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "127.0.0.1"
        port = 0
      }
    }

    cluster {
      roles = ["backend"]
      seed-nodes = [
        "akka.tcp://ClusterSystem@127.0.0.1:2551"]

      auto-down-unreachable-after = 10s
    }
  }
}
